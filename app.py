import os
import streamlit as st
import json
import tempfile
from PIL import Image
import time
import uuid
from utils.config import validate_api_keys, create_directories, DEFAULT_CONFIG
from utils.story_generator import StoryGenerator
from utils.image_generator import ImageGenerator
from utils.audio_generator import AudioGenerator
from utils.video_generator import VideoGenerator
from utils.db_utils import db_manager
from utils.telegram_utils import telegram_manager
import pandas as pd
import traceback

# C·∫•u h√¨nh trang Streamlit
st.set_page_config(
    page_title="T·∫°o Truy·ªán v√† Video T·ª± ƒê·ªông",
    page_icon="üé¨",
    layout="wide"
)

# H√†m t·∫°o th∆∞ m·ª•c output v·ªõi ID phi√™n
def create_session_directory():
    if 'session_id' not in st.session_state:
        st.session_state.session_id = str(int(time.time()))
    
    session_dir = os.path.join(DEFAULT_CONFIG['output_dir'], st.session_state.session_id)
    os.makedirs(session_dir, exist_ok=True)
    return session_dir

# H√†m ƒë·ªçc d·ªØ li·ªáu t·ª´ file JSON
def read_json_data(file_path):
    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    return None

# H√†m hi·ªÉn th·ªã th√¥ng tin truy·ªán
def display_story(story_data, output_dir):
    st.header("N·ªôi dung truy·ªán ƒë√£ t·∫°o")
    
    for chapter in story_data["chapters"]:
        with st.expander(f"Ch∆∞∆°ng {chapter['chapter_num']}: {chapter.get('title', '')}"):
            st.write(chapter["content"])
            
            # N√∫t t·∫£i xu·ªëng ch∆∞∆°ng
            chapter_file = os.path.join(output_dir, f"chapter_{chapter['chapter_num']}.txt")
            if os.path.exists(chapter_file):
                with open(chapter_file, "r", encoding="utf-8") as f:
                    chapter_text = f.read()
                st.download_button(
                    label=f"T·∫£i xu·ªëng ch∆∞∆°ng {chapter['chapter_num']}",
                    data=chapter_text,
                    file_name=f"chapter_{chapter['chapter_num']}.txt",
                    mime="text/plain"
                )

# H√†m hi·ªÉn th·ªã h√¨nh ·∫£nh
def display_images(story_images):
    """Hi·ªÉn th·ªã h√¨nh ·∫£nh minh h·ªça cho t·ª´ng ch∆∞∆°ng"""
    st.subheader("H√¨nh ·∫£nh minh h·ªça")
    
    # Ki·ªÉm tra d·ªØ li·ªáu h√¨nh ·∫£nh
    if not story_images:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu h√¨nh ·∫£nh n√†o.")
        return
    
    # Hi·ªÉn th·ªã theo tabs cho t·ª´ng ch∆∞∆°ng
    chapter_tabs = st.tabs([f"Ch∆∞∆°ng {chapter_data['chapter_num']}" for chapter_data in story_images])
    
    for i, tab in enumerate(chapter_tabs):
        chapter_data = story_images[i]
        chapter_images = chapter_data.get("images", [])
        
        with tab:
            if not chapter_images:
                st.warning(f"Kh√¥ng c√≥ h√¨nh ·∫£nh cho Ch∆∞∆°ng {chapter_data['chapter_num']}.")
                continue
            
            st.write(f"C√≥ {len(chapter_images)} h√¨nh ·∫£nh minh h·ªça cho ch∆∞∆°ng n√†y.")
            
            # Hi·ªÉn th·ªã h√¨nh ·∫£nh theo grid
            cols = 2
            for j in range(0, len(chapter_images), cols):
                row_cols = st.columns(cols)
                
                for k in range(cols):
                    idx = j + k
                    if idx < len(chapter_images):
                        image_data = chapter_images[idx]
                        image_path = image_data.get("image_path")
                        
                        with row_cols[k]:
                            if os.path.exists(image_path):
                                st.image(image_path, use_column_width=True)
                                
                                # Hi·ªÉn th·ªã th√¥ng tin ƒëo·∫°n vƒÉn ƒë∆∞·ª£c s·ª≠ d·ª•ng
                                with st.expander("Xem ƒëo·∫°n vƒÉn v√† prompt"):
                                    st.markdown("**ƒêo·∫°n vƒÉn b·∫£n:**")
                                    st.text(image_data.get("segment_text", "")[:300] + "...")
                                    
                                    st.markdown("**Prompt ƒë√£ s·ª≠ d·ª•ng:**")
                                    prompt = image_data.get("prompt", "")
                                    prompt_parts = prompt.split("\n\n")
                                    
                                    # Hi·ªÉn th·ªã c·∫•u tr√∫c prompt theo t·ª´ng ph·∫ßn
                                    if len(prompt_parts) > 1:
                                        st.text(prompt_parts[0])  # Hi·ªÉn th·ªã ph·∫ßn ch√≠nh c·ªßa prompt
                                        if len(prompt_parts) > 1:
                                            st.text("Th√¥ng tin nh√¢n v·∫≠t:" + prompt_parts[1])
                                    else:
                                        st.text(prompt)
                            else:
                                st.error(f"Kh√¥ng t√¨m th·∫•y file: {image_path}")
    
    # T√πy ch·ªçn t·∫£i xu·ªëng t·∫•t c·∫£ h√¨nh ·∫£nh
    with st.expander("T·∫£i xu·ªëng h√¨nh ·∫£nh"):
        all_images = []
        for chapter in story_images:
            for img in chapter.get("images", []):
                if img.get("image_path") and os.path.exists(img.get("image_path")):
                    all_images.append(img.get("image_path"))
        
        if all_images:
            st.write(f"C√≥ t·ªïng c·ªông {len(all_images)} h√¨nh ·∫£nh.")
            st.markdown("S·ª≠ d·ª•ng th∆∞ m·ª•c output ƒë·ªÉ t√¨m c√°c h√¨nh ·∫£nh ƒë√£ t·∫°o.")

# H√†m hi·ªÉn th·ªã audio
def display_audio(story_audio):
    st.header("Audio ƒë√£ t·∫°o")
    
    for chapter_audio in story_audio:
        chapter_num = chapter_audio["chapter_num"]
        full_audio = chapter_audio.get("full_audio")
        
        with st.expander(f"Audio cho Ch∆∞∆°ng {chapter_num}"):
            if full_audio and os.path.exists(full_audio):
                st.audio(full_audio)
                st.download_button(
                    label=f"T·∫£i xu·ªëng audio ch∆∞∆°ng {chapter_num}",
                    data=open(full_audio, "rb").read(),
                    file_name=f"chapter_{chapter_num}_audio.mp3",
                    mime="audio/mpeg"
                )
            else:
                segments = chapter_audio.get("segments", [])
                if segments:
                    for i, segment in enumerate(segments):
                        audio_path = segment.get("audio_path")
                        if audio_path and os.path.exists(audio_path):
                            st.write(f"**ƒêo·∫°n {i+1}:**")
                            st.audio(audio_path)
                else:
                    st.write("Kh√¥ng c√≥ audio n√†o ƒë∆∞·ª£c t·∫°o cho ch∆∞∆°ng n√†y.")

# H√†m hi·ªÉn th·ªã video
def display_videos(video_data, video_id=None):
    st.header("Video ƒë√£ t·∫°o")
    
    full_video = video_data.get("full_video")
    if full_video and os.path.exists(full_video):
        st.subheader("Video truy·ªán ƒë·∫ßy ƒë·ªß")
        st.video(full_video)
        
        # T·∫°o n√∫t t·∫£i xu·ªëng v·ªõi callback ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i
        video_bytes = open(full_video, "rb").read()
        col1, col2 = st.columns([3, 1])
        with col1:
            # T·∫°o key duy nh·∫•t b·∫±ng c√°ch th√™m UUID ng·∫´u nhi√™n
            random_uuid = str(uuid.uuid4())
            download_key = f"download_full_{video_id if video_id else 'default'}_{random_uuid}"
            st.download_button(
                label="T·∫£i xu·ªëng video ƒë·∫ßy ƒë·ªß",
                data=video_bytes,
                file_name="full_story.mp4",
                mime="video/mp4",
                on_click=update_download_status if video_id else None,
                kwargs={"video_id": video_id} if video_id else None,
                key=download_key
            )
        with col2:
            if video_id:
                st.info("üì• ƒê√£ l∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu")
            
    
    chapter_videos = video_data.get("chapter_videos", [])
    if chapter_videos:
        st.subheader("Video t·ª´ng ch∆∞∆°ng")
        for chapter_video in chapter_videos:
            video_path = chapter_video.get("video_path")
            chapter_num = chapter_video.get("chapter_num")
            if video_path and os.path.exists(video_path):
                with st.expander(f"Video Ch∆∞∆°ng {chapter_num}"):
                    st.video(video_path)
                    
                    # T·∫°o key duy nh·∫•t cho n√∫t t·∫£i xu·ªëng video ch∆∞∆°ng
                    chapter_random_uuid = str(uuid.uuid4())
                    chapter_download_key = f"download_chapter_{chapter_num}_{video_id if video_id else 'default'}_{chapter_random_uuid}"
                    
                    # T·∫£i xu·ªëng v·ªõi c·∫≠p nh·∫≠t tr·∫°ng th√°i
                    st.download_button(
                        label=f"T·∫£i xu·ªëng video ch∆∞∆°ng {chapter_num}",
                        data=open(video_path, "rb").read(),
                        file_name=f"chapter_{chapter_num}_video.mp4",
                        mime="video/mp4",
                        on_click=update_download_status if video_id else None,
                        kwargs={"video_id": video_id, "chapter_num": chapter_num} if video_id else None,
                        key=chapter_download_key
                    )
    
    # Hi·ªÉn th·ªã c√°c frame h√¨nh ·∫£nh n·∫øu c√≥ story_images trong session_state
    if "custom_story_images" in st.session_state:
        display_frames(video_data, st.session_state.custom_story_images, st.session_state.get("custom_story_output_dir", "output"))

# H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫£i xu·ªëng trong MongoDB
def update_download_status(video_id, chapter_num=None):
    if not video_id:
        return
    
    result = db_manager.update_download_status(video_id, chapter_num, downloaded=True)
    if result:
        if chapter_num:
            st.session_state.download_status[f"chapter_{chapter_num}"] = True
        else:
            st.session_state.download_status["full_video"] = True

# H√†m hi·ªÉn th·ªã log
def create_log_container():
    """T·∫°o container ƒë·ªÉ hi·ªÉn th·ªã log chi ti·∫øt"""
    log_container = st.expander("Xem log ti·∫øn tr√¨nh", expanded=False)
    log_placeholder = log_container.empty()
    return log_placeholder

def update_log(log_placeholder, message):
    """C·∫≠p nh·∫≠t log v·ªõi th√¥ng b√°o m·ªõi"""
    if "log_messages" not in st.session_state:
        st.session_state.log_messages = []
    
    timestamp = time.strftime("%H:%M:%S", time.localtime())
    log_entry = f"[{timestamp}] {message}"
    st.session_state.log_messages.append(log_entry)
    
    # Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c log
    log_placeholder.code("\n".join(st.session_state.log_messages))

def main():
    st.title("üé¨ T·∫°o T·ª± ƒê·ªông Truy·ªán v√† Video t·ª´ √ù T∆∞·ªüng")
    st.markdown("""
    ·ª®ng d·ª•ng n√†y gi√∫p b·∫°n t·∫°o t·ª± ƒë·ªông n·ªôi dung truy·ªán v√† video t·ª´ √Ω t∆∞·ªüng c·ªßa b·∫°n. 
    S·ª≠ d·ª•ng c√°c m√¥ h√¨nh AI ti√™n ti·∫øn nh·∫•t ƒë·ªÉ t·∫°o n·ªôi dung truy·ªán, h√¨nh ·∫£nh minh h·ªça, √¢m thanh v√† video.
    """)
    
    # Ki·ªÉm tra API keys khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
    try:
        validate_api_keys()
    except ValueError as e:
        st.error(f"L·ªói: {e}")
        st.warning("Vui l√≤ng c·∫≠p nh·∫≠t file .env v·ªõi c√°c API key c·∫ßn thi·∫øt.")
        return
    
    # T·∫°o th∆∞ m·ª•c output cho phi√™n l√†m vi·ªác hi·ªán t·∫°i
    output_dir = create_session_directory()
    create_directories()
    
    # T·∫°o tabs
    tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs(["C√†i ƒë·∫∑t", "T·∫°o Truy·ªán", "T·∫°o H√¨nh ·∫£nh", "T·∫°o Audio", "T·∫°o Video", "T·∫°o T·∫•t C·∫£", "T·∫°o Truy·ªán Theo Ch∆∞∆°ng C√≥ S·∫µn"])
    
    # Tab C√†i ƒë·∫∑t
    with tab1:
        st.header("C√†i ƒë·∫∑t truy·ªán")
        
        # Form nh·∫≠p th√¥ng tin
        with st.form("story_form"):
            story_concept = st.text_area("√ù t∆∞·ªüng truy·ªán c·ªßa b·∫°n", 
                                        help="Nh·∫≠p √Ω t∆∞·ªüng ho·∫∑c ch·ªß ƒë·ªÅ cho c√¢u chuy·ªán b·∫°n mu·ªën t·∫°o")
            
            col1, col2 = st.columns(2)
            with col1:
                num_chapters = st.number_input("S·ªë ch∆∞∆°ng truy·ªán", 
                                               min_value=1, max_value=10, 
                                               value=DEFAULT_CONFIG['num_chapters'])
                
                tokens_per_chapter = st.number_input("S·ªë token m·ªói ch∆∞∆°ng", 
                                                    min_value=100, max_value=2000, 
                                                    value=DEFAULT_CONFIG['tokens_per_chapter'],
                                                    step=100)
            
            with col2:
                image_model = st.selectbox("Model t·∫°o h√¨nh ·∫£nh", 
                                           options=["cogview4", "stable_diffusion", "gemini"],
                                           index=0,
                                           format_func=lambda x: {
                                               "cogview4": "CogView 4",
                                               "stable_diffusion": "Stable Diffusion",
                                               "gemini": "Gemini 2.0 Flash Image Gen"
                                           }.get(x, x))
                
                tts_provider = st.selectbox("Provider text-to-speech", 
                                           options=["google", "openai"],
                                           index=0,
                                           format_func=lambda x: {
                                               "google": "Google TTS (gTTS)",
                                               "openai": "OpenAI TTS"
                                           }.get(x, x))
            
            # L∆∞u c√†i ƒë·∫∑t
            submitted = st.form_submit_button("L∆∞u c√†i ƒë·∫∑t")
            if submitted:
                if not story_concept:
                    st.error("Vui l√≤ng nh·∫≠p √Ω t∆∞·ªüng truy·ªán!")
                else:
                    # L∆∞u c√†i ƒë·∫∑t v√†o session_state v·ªõi key kh√°c
                    st.session_state.story_config = {
                        "story_concept": story_concept,
                        "num_chapters": num_chapters,
                        "tokens_per_chapter": tokens_per_chapter,
                        "image_model": image_model,
                        "tts_provider": tts_provider,
                        "output_dir": output_dir
                    }
                    st.success("ƒê√£ l∆∞u c√†i ƒë·∫∑t th√†nh c√¥ng!")
        
        # Hi·ªÉn th·ªã c√†i ƒë·∫∑t hi·ªán t·∫°i
        if 'story_config' in st.session_state:
            st.subheader("C√†i ƒë·∫∑t hi·ªán t·∫°i")
            settings = st.session_state.story_config
            st.json(json.dumps({
                "story_concept": settings["story_concept"][:50] + "..." if len(settings["story_concept"]) > 50 else settings["story_concept"],
                "num_chapters": settings["num_chapters"],
                "tokens_per_chapter": settings["tokens_per_chapter"],
                "image_model": settings["image_model"],
                "tts_provider": settings["tts_provider"]
            }, indent=2))
    
    # Tab T·∫°o Truy·ªán
    with tab2:
        st.header("T·∫°o n·ªôi dung truy·ªán")
        
        if 'story_config' not in st.session_state:
            st.warning("Vui l√≤ng c√†i ƒë·∫∑t th√¥ng tin truy·ªán ·ªü tab C√†i ƒë·∫∑t tr∆∞·ªõc!")
        else:
            settings = st.session_state.story_config
            
            # N√∫t t·∫°o truy·ªán
            if st.button("T·∫°o n·ªôi dung truy·ªán"):
                with st.spinner("ƒêang t·∫°o n·ªôi dung truy·ªán..."):
                    story_generator = StoryGenerator()
                    story_data = story_generator.generate_full_story(
                        settings["story_concept"],
                        num_chapters=settings["num_chapters"],
                        tokens_per_chapter=settings["tokens_per_chapter"],
                        output_dir=settings["output_dir"]
                    )
                    
                    # L∆∞u story_data v√†o session_state
                    st.session_state.story_data = story_data
                    st.success(f"ƒê√£ t·∫°o xong c√¢u chuy·ªán v·ªõi {settings['num_chapters']} ch∆∞∆°ng!")
            
            # Hi·ªÉn th·ªã n·ªôi dung truy·ªán n·∫øu ƒë√£ t·∫°o
            if 'story_data' in st.session_state:
                display_story(st.session_state.story_data, settings["output_dir"])
            else:
                # Ki·ªÉm tra xem c√≥ file story_data.json kh√¥ng
                story_data_path = os.path.join(settings["output_dir"], "story_data.json")
                if os.path.exists(story_data_path):
                    story_data = read_json_data(story_data_path)
                    if story_data:
                        st.session_state.story_data = story_data
                        display_story(story_data, settings["output_dir"])
    
    # Tab T·∫°o H√¨nh ·∫£nh
    with tab3:
        st.header("T·∫°o h√¨nh ·∫£nh minh h·ªça")
        
        if 'story_config' not in st.session_state:
            st.warning("Vui l√≤ng c√†i ƒë·∫∑t th√¥ng tin truy·ªán ·ªü tab C√†i ƒë·∫∑t tr∆∞·ªõc!")
        elif 'story_data' not in st.session_state:
            st.warning("Vui l√≤ng t·∫°o n·ªôi dung truy·ªán ·ªü tab T·∫°o Truy·ªán tr∆∞·ªõc!")
        else:
            settings = st.session_state.story_config
            
            # T√πy ch·ªçn c·∫•u h√¨nh t·∫°o h√¨nh ·∫£nh
            with st.expander("T√πy ch·ªçn n√¢ng cao", expanded=False):
                max_images_per_chapter = st.slider("S·ªë h√¨nh ·∫£nh t·ªëi ƒëa cho m·ªói ch∆∞∆°ng", 
                                                   min_value=1, max_value=10, value=5)
                sample_chapters = st.checkbox("Ch·ªâ t·∫°o h√¨nh ·∫£nh cho m·ªôt s·ªë ch∆∞∆°ng m·∫´u", value=False)
                
                if sample_chapters:
                    num_chapters = len(st.session_state.story_data["chapters"])
                    selected_chapters = st.multiselect(
                        "Ch·ªçn c√°c ch∆∞∆°ng c·∫ßn t·∫°o h√¨nh ·∫£nh",
                        options=list(range(1, num_chapters + 1)),
                        default=[1]
                    )
            
            # N√∫t t·∫°o h√¨nh ·∫£nh
            if st.button("T·∫°o h√¨nh ·∫£nh minh h·ªça"):
                try:
                    with st.spinner(f"ƒêang t·∫°o h√¨nh ·∫£nh minh h·ªça v·ªõi model {settings['image_model']}..."):
                        # Kh·ªüi t·∫°o ImageGenerator v·ªõi t√πy ch·ªçn n√¢ng cao
                        image_generator = ImageGenerator(model_type=settings["image_model"])
                        
                        # Gi·ªõi h·∫°n s·ªë ch∆∞∆°ng n·∫øu c·∫ßn
                        if sample_chapters and selected_chapters:
                            filtered_story_data = {
                                "concept": st.session_state.story_data["concept"],
                                "num_chapters": len(selected_chapters),
                                "chapters": [
                                    chapter for chapter in st.session_state.story_data["chapters"] 
                                    if chapter["chapter_num"] in selected_chapters
                                ]
                            }
                            story_data_to_process = filtered_story_data
                        else:
                            story_data_to_process = st.session_state.story_data
                        
                        # X·ª≠ l√Ω t·∫°o h√¨nh ·∫£nh
                        story_images = image_generator.process_story(
                            story_data_to_process, 
                            output_dir=settings["output_dir"]
                        )
                        
                        # L∆∞u story_images v√†o session_state
                        st.session_state.story_images = story_images
                        st.success("ƒê√£ t·∫°o xong h√¨nh ·∫£nh minh h·ªça!")
                except MemoryError:
                    st.error("L·ªói: Kh√¥ng ƒë·ªß b·ªô nh·ªõ ƒë·ªÉ x·ª≠ l√Ω. H√£y th·ª≠ gi·∫£m s·ªë ch∆∞∆°ng ho·∫∑c ch·ªçn ph∆∞∆°ng ph√°p 'Ch·ªâ t·∫°o h√¨nh ·∫£nh cho m·ªôt s·ªë ch∆∞∆°ng m·∫´u'.")
                except Exception as e:
                    st.error(f"L·ªói khi t·∫°o h√¨nh ·∫£nh: {str(e)}")
                    st.info("H√£y th·ª≠ l·∫°i v·ªõi √≠t ch∆∞∆°ng h∆°n ho·∫∑c gi·∫£m k√≠ch th∆∞·ªõc n·ªôi dung.")
            
            # Hi·ªÉn th·ªã h√¨nh ·∫£nh n·∫øu ƒë√£ t·∫°o
            if 'story_images' in st.session_state:
                display_images(st.session_state.story_images)
            else:
                # Ki·ªÉm tra xem c√≥ file images_data.json kh√¥ng
                images_data_path = os.path.join(settings["output_dir"], "images_data.json")
                if os.path.exists(images_data_path):
                    story_images = read_json_data(images_data_path)
                    if story_images:
                        st.session_state.story_images = story_images
                        display_images(story_images)
    
    # Tab T·∫°o Audio
    with tab4:
        st.header("T·∫°o Audio t·ª´ Text")
        
        if 'story_config' not in st.session_state:
            st.warning("Vui l√≤ng c√†i ƒë·∫∑t th√¥ng tin truy·ªán ·ªü tab C√†i ƒë·∫∑t tr∆∞·ªõc!")
        elif 'story_data' not in st.session_state:
            st.warning("Vui l√≤ng t·∫°o n·ªôi dung truy·ªán ·ªü tab T·∫°o Truy·ªán tr∆∞·ªõc!")
        else:
            settings = st.session_state.story_config
            
            # N√∫t t·∫°o audio
            if st.button("T·∫°o audio t·ª´ text"):
                with st.spinner(f"ƒêang t·∫°o audio v·ªõi provider {settings['tts_provider']}..."):
                    audio_generator = AudioGenerator(provider=settings["tts_provider"])
                    story_audio = audio_generator.process_story(
                        st.session_state.story_data, 
                        output_dir=settings["output_dir"]
                    )
                    
                    # L∆∞u story_audio v√†o session_state
                    st.session_state.story_audio = story_audio
                    st.success("ƒê√£ t·∫°o xong audio!")
            
            # Hi·ªÉn th·ªã audio n·∫øu ƒë√£ t·∫°o
            if 'story_audio' in st.session_state:
                display_audio(st.session_state.story_audio)
            else:
                # Ki·ªÉm tra xem c√≥ file audio_data.json kh√¥ng
                audio_data_path = os.path.join(settings["output_dir"], "audio_data.json")
                if os.path.exists(audio_data_path):
                    story_audio = read_json_data(audio_data_path)
                    if story_audio:
                        st.session_state.story_audio = story_audio
                        display_audio(story_audio)
    
    # Tab T·∫°o Video
    with tab5:
        st.header("T·∫°o Video t·ª´ Audio v√† H√¨nh ·∫£nh")
        
        if 'story_config' not in st.session_state:
            st.warning("Vui l√≤ng c√†i ƒë·∫∑t th√¥ng tin truy·ªán ·ªü tab C√†i ƒë·∫∑t tr∆∞·ªõc!")
        elif 'story_data' not in st.session_state:
            st.warning("Vui l√≤ng t·∫°o n·ªôi dung truy·ªán ·ªü tab T·∫°o Truy·ªán tr∆∞·ªõc!")
        elif 'story_images' not in st.session_state:
            st.warning("Vui l√≤ng t·∫°o h√¨nh ·∫£nh ·ªü tab T·∫°o H√¨nh ·∫£nh tr∆∞·ªõc!")
        elif 'story_audio' not in st.session_state:
            st.warning("Vui l√≤ng t·∫°o audio ·ªü tab T·∫°o Audio tr∆∞·ªõc!")
        else:
            settings = st.session_state.story_config
            
            # T√πy ch·ªçn cho video
            with st.expander("T√πy ch·ªçn video", expanded=True):
                col1, col2 = st.columns(2)
                with col1:
                    width = st.number_input("Chi·ªÅu r·ªông video (pixels)", min_value=320, max_value=1920, value=1280, step=16)
                with col2:
                    height = st.number_input("Chi·ªÅu cao video (pixels)", min_value=240, max_value=1080, value=720, step=16)
                
                fps = st.slider("Frames per second (FPS)", min_value=15, max_value=60, value=30, step=1)
            
            # N√∫t t·∫°o video
            if st.button("T·∫°o video"):
                with st.spinner("ƒêang t·∫°o video... Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t nhi·ªÅu th·ªùi gian..."):
                    video_generator = VideoGenerator(width=width, height=height, fps=fps)
                    video_data = video_generator.create_full_video(
                        st.session_state.story_data,
                        st.session_state.story_images,
                        st.session_state.story_audio,
                        output_dir=settings["output_dir"]
                    )
                    
                    # L∆∞u video_data v√†o session_state
                    st.session_state.video_data = video_data
                    
                    if video_data and video_data.get("full_video"):
                        st.success("ƒê√£ t·∫°o xong video ƒë·∫ßy ƒë·ªß!")
                    else:
                        st.warning("Kh√¥ng th·ªÉ t·∫°o video ƒë·∫ßy ƒë·ªß, nh∆∞ng c√≥ th·ªÉ ƒë√£ t·∫°o ƒë∆∞·ª£c video cho m·ªôt s·ªë ch∆∞∆°ng.")
            
            # Hi·ªÉn th·ªã video n·∫øu ƒë√£ t·∫°o
            if 'video_data' in st.session_state:
                display_videos(st.session_state.video_data)

    # Tab T·∫°o T·∫•t C·∫£
    with tab6:
        st.header("T·∫°o T·∫•t C·∫£ - M·ªôt Nh·∫•p Ho√†n Th√†nh")
        
        # Form nh·∫≠p th√¥ng tin
        with st.form("all_in_one_form"):
            st.markdown("### C√†i ƒë·∫∑t truy·ªán")
            
            story_concept = st.text_area("√ù t∆∞·ªüng truy·ªán c·ªßa b·∫°n", 
                help="Nh·∫≠p √Ω t∆∞·ªüng ho·∫∑c ch·ªß ƒë·ªÅ cho c√¢u chuy·ªán b·∫°n mu·ªën t·∫°o")
            
            col1, col2 = st.columns(2)
            with col1:
                num_chapters = st.number_input("S·ªë ch∆∞∆°ng truy·ªán", 
                    min_value=1, max_value=10, 
                    value=DEFAULT_CONFIG['num_chapters'])
                
                tokens_per_chapter = st.number_input("S·ªë token m·ªói ch∆∞∆°ng", 
                    min_value=100, max_value=4000, 
                    value=DEFAULT_CONFIG['tokens_per_chapter'],
                    step=100)
            
            with col2:
                image_model = st.selectbox("Model t·∫°o h√¨nh ·∫£nh", 
                    options=["cogview4", "stable_diffusion", "gemini"],
                    index=0,
                    format_func=lambda x: {
                        "cogview4": "CogView 4",
                        "gemini": "Gemini 2.0 Flash Image Gen",
                        "stable_diffusion": "Stable Diffusion"
                        
                    }.get(x, x),
                    key="all_in_one_image_model")
                
                tts_provider = st.selectbox("Provider text-to-speech", 
                    options=["google", "openai"],
                    index=0,
                    format_func=lambda x: {
                        "google": "Google TTS (gTTS)",
                        "openai": "OpenAI TTS"
                    }.get(x, x),
                    key="all_in_one_tts")
            
            # T√πy ch·ªçn n√¢ng cao (thu g·ªçn m·∫∑c ƒë·ªãnh)
            with st.expander("T√πy ch·ªçn n√¢ng cao", expanded=False):
                st.markdown("#### T√πy ch·ªçn video")
                vcol1, vcol2 = st.columns(2)
                with vcol1:
                    width = st.number_input("Chi·ªÅu r·ªông video (pixels)", 
                                          min_value=320, max_value=1920, value=1280, step=16)
                with vcol2:
                    height = st.number_input("Chi·ªÅu cao video (pixels)", 
                                           min_value=240, max_value=1080, value=720, step=16)
                
                fps = st.slider("Frames per second (FPS)", 
                              min_value=15, max_value=60, value=30, step=1)
            
            # N√∫t th·ª±c hi·ªán t·∫•t c·∫£
            submitted = st.form_submit_button("üöÄ T·∫°o T·∫•t C·∫£")
            
        # X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t
        if submitted:
            if not story_concept:
                st.error("Vui l√≤ng nh·∫≠p √Ω t∆∞·ªüng truy·ªán!")
            else:
                # L∆∞u c√†i ƒë·∫∑t
                all_in_one_settings = {
                    "story_concept": story_concept,
                    "num_chapters": num_chapters,
                    "tokens_per_chapter": tokens_per_chapter,
                    "image_model": image_model,
                    "tts_provider": tts_provider,
                    "output_dir": output_dir,
                    "video_width": width if 'width' in locals() else 1280,
                    "video_height": height if 'height' in locals() else 720,
                    "video_fps": fps if 'fps' in locals() else 30
                }
                
                # Hi·ªÉn th·ªã khung ti·∫øn tr√¨nh
                progress_container = st.empty()
                progress_bar = st.progress(0)
                status_container = st.empty()
                
                # T·∫°o container hi·ªÉn th·ªã log
                log_placeholder = create_log_container()
                update_log(log_placeholder, f"B·∫Øt ƒë·∫ßu quy tr√¨nh t·∫°o n·ªôi dung t·ª± ƒë·ªông v·ªõi √Ω t∆∞·ªüng: {story_concept[:100]}...")
                
                try:
                    # B∆∞·ªõc 1: T·∫°o truy·ªán
                    with st.spinner("B∆∞·ªõc 1/4: ƒêang t·∫°o n·ªôi dung truy·ªán..."):
                        status_container.info("B∆∞·ªõc 1/4: ƒêang t·∫°o n·ªôi dung truy·ªán...")
                        update_log(log_placeholder, f"B·∫Øt ƒë·∫ßu t·∫°o {num_chapters} ch∆∞∆°ng truy·ªán v·ªõi {tokens_per_chapter} token m·ªói ch∆∞∆°ng")
                        
                        story_generator = StoryGenerator()
                        story_data = story_generator.generate_full_story(
                            all_in_one_settings["story_concept"],
                            num_chapters=all_in_one_settings["num_chapters"],
                            tokens_per_chapter=all_in_one_settings["tokens_per_chapter"],
                            output_dir=all_in_one_settings["output_dir"]
                        )
                        
                        # L∆∞u story_data v√†o session_state
                        st.session_state.story_data = story_data
                        progress_bar.progress(25)
                        status_container.success(f"‚úÖ ƒê√£ t·∫°o xong c√¢u chuy·ªán v·ªõi {all_in_one_settings['num_chapters']} ch∆∞∆°ng!")
                        update_log(log_placeholder, f"‚úÖ ƒê√£ t·∫°o xong c√¢u chuy·ªán v·ªõi {all_in_one_settings['num_chapters']} ch∆∞∆°ng")
                        update_log(log_placeholder, f"ƒê∆∞·ªùng d·∫´n file d·ªØ li·ªáu truy·ªán: {all_in_one_settings['output_dir']}/story_data.json")
                    
                    # B∆∞·ªõc 2: T·∫°o h√¨nh ·∫£nh
                    with st.spinner("B∆∞·ªõc 2/4: ƒêang t·∫°o h√¨nh ·∫£nh minh h·ªça..."):
                        status_container.info("B∆∞·ªõc 2/4: ƒêang t·∫°o h√¨nh ·∫£nh minh h·ªça...")
                        update_log(log_placeholder, f"B·∫Øt ƒë·∫ßu t·∫°o h√¨nh ·∫£nh minh h·ªça s·ª≠ d·ª•ng model {all_in_one_settings['image_model']}")
                        
                        image_generator = ImageGenerator(model_type=all_in_one_settings["image_model"])
                        # Th√™m c√°c s·ª± ki·ªán v√†o log
                        def log_image_event(chapter_num, scene_num, total_scenes):
                            update_log(log_placeholder, f"ƒêang t·∫°o h√¨nh ·∫£nh {scene_num}/{total_scenes} cho ch∆∞∆°ng {chapter_num}")
                        
                        # Tr√≠ch xu·∫•t th√¥ng tin nh√¢n v·∫≠t
                        update_log(log_placeholder, "ƒêang ph√¢n t√≠ch th√¥ng tin nh√¢n v·∫≠t ƒë·ªÉ t·∫°o h√¨nh ·∫£nh nh·∫•t qu√°n...")
                        
                        story_images = image_generator.process_story(
                            story_data, 
                            output_dir=all_in_one_settings["output_dir"]
                        )
                        
                        # L∆∞u story_images v√†o session_state
                        st.session_state.story_images = story_images
                        progress_bar.progress(50)
                        status_container.success("‚úÖ ƒê√£ t·∫°o xong h√¨nh ·∫£nh minh h·ªça!")
                        update_log(log_placeholder, "‚úÖ ƒê√£ t·∫°o xong h√¨nh ·∫£nh minh h·ªça")
                        total_images = sum(len(chapter.get("images", [])) for chapter in story_images)
                        update_log(log_placeholder, f"T·ªïng c·ªông ƒë√£ t·∫°o {total_images} h√¨nh ·∫£nh cho {len(story_images)} ch∆∞∆°ng")
                        update_log(log_placeholder, f"ƒê∆∞·ªùng d·∫´n file d·ªØ li·ªáu h√¨nh ·∫£nh: {all_in_one_settings['output_dir']}/images_data.json")
                    
                    # B∆∞·ªõc 3: T·∫°o audio
                    with st.spinner("B∆∞·ªõc 3/4: ƒêang t·∫°o audio..."):
                        status_container.info("B∆∞·ªõc 3/4: ƒêang t·∫°o audio...")
                        update_log(log_placeholder, f"B·∫Øt ƒë·∫ßu t·∫°o audio s·ª≠ d·ª•ng provider {all_in_one_settings['tts_provider']}")
                        
                        audio_generator = AudioGenerator(provider=all_in_one_settings["tts_provider"])
                        story_audio = audio_generator.process_story(
                            story_data, 
                            output_dir=all_in_one_settings["output_dir"]
                        )
                        
                        # L∆∞u story_audio v√†o session_state
                        st.session_state.story_audio = story_audio
                        progress_bar.progress(75)
                        status_container.success("‚úÖ ƒê√£ t·∫°o xong audio!")
                        update_log(log_placeholder, "‚úÖ ƒê√£ t·∫°o xong audio")
                        update_log(log_placeholder, f"ƒê∆∞·ªùng d·∫´n file d·ªØ li·ªáu audio: {all_in_one_settings['output_dir']}/audio_data.json")
                    
                    # B∆∞·ªõc 4: T·∫°o video
                    with st.spinner("B∆∞·ªõc 4/4: ƒêang t·∫°o video... Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t nhi·ªÅu th·ªùi gian..."):
                        status_container.info("B∆∞·ªõc 4/4: ƒêang t·∫°o video... Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t nhi·ªÅu th·ªùi gian...")
                        update_log(log_placeholder, f"B·∫Øt ƒë·∫ßu t·∫°o video v·ªõi k√≠ch th∆∞·ªõc {all_in_one_settings['video_width']}x{all_in_one_settings['video_height']}, {all_in_one_settings['video_fps']} FPS")
                        
                        video_generator = VideoGenerator(
                            width=all_in_one_settings["video_width"],
                            height=all_in_one_settings["video_height"],
                            fps=all_in_one_settings["video_fps"]
                        )
                        video_data = video_generator.create_full_video(
                            story_data,
                            story_images,
                            story_audio,
                            output_dir=all_in_one_settings["output_dir"]
                        )
                        
                        # L∆∞u video_data v√†o session_state
                        st.session_state.video_data = video_data
                        progress_bar.progress(100)
                        
                        if video_data and video_data.get("full_video"):
                            status_container.success("üéâ Ho√†n th√†nh! ƒê√£ t·∫°o xong video ƒë·∫ßy ƒë·ªß!")
                            update_log(log_placeholder, "üéâ Ho√†n th√†nh! ƒê√£ t·∫°o xong video ƒë·∫ßy ƒë·ªß")
                            update_log(log_placeholder, f"ƒê∆∞·ªùng d·∫´n video ƒë·∫ßy ƒë·ªß: {video_data.get('full_video')}")
                        else:
                            status_container.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o video ƒë·∫ßy ƒë·ªß, nh∆∞ng c√≥ th·ªÉ ƒë√£ t·∫°o ƒë∆∞·ª£c video cho m·ªôt s·ªë ch∆∞∆°ng.")
                            update_log(log_placeholder, "‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o video ƒë·∫ßy ƒë·ªß, nh∆∞ng c√≥ th·ªÉ ƒë√£ t·∫°o ƒë∆∞·ª£c video cho m·ªôt s·ªë ch∆∞∆°ng")
                            if video_data and video_data.get("chapter_videos"):
                                for chapter_video in video_data.get("chapter_videos"):
                                    if chapter_video.get("video_path"):
                                        update_log(log_placeholder, f"Video ch∆∞∆°ng {chapter_video.get('chapter_num')}: {chapter_video.get('video_path')}")
                        
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
                        if "video_data" in st.session_state and st.session_state.video_data:
                            all_videos = []
                            full_video = st.session_state.video_data.get("full_video")
                            if full_video and os.path.exists(full_video):
                                st.subheader("Video ƒë·∫ßy ƒë·ªß")
                                st.video(full_video)
                                st.download_button(
                                    label="T·∫£i xu·ªëng video ƒë·∫ßy ƒë·ªß",
                                    data=open(full_video, "rb").read(),
                                    file_name="full_story.mp4",
                                    mime="video/mp4"
                                )
                                
                                # Th√¥ng tin ƒë∆∞·ªùng d·∫´n
                                st.info(f"Video ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: {os.path.abspath(full_video)}")
                                all_videos.append(full_video)
                        
                        # ƒê√°nh gi√° k·∫øt qu·∫£
                        update_log(log_placeholder, "===== K·∫æT QU·∫¢ CU·ªêI C√ôNG =====")
                        update_log(log_placeholder, f"- S·ªë ch∆∞∆°ng ƒë√£ t·∫°o: {len(story_data['chapters'])}")
                        update_log(log_placeholder, f"- T·ªïng s·ªë h√¨nh ·∫£nh: {sum(len(chapter.get('images', [])) for chapter in story_images)}")
                        update_log(log_placeholder, f"- T·ªïng s·ªë video: {len(all_videos)}")
                        update_log(log_placeholder, f"- Th·ªùi gian ho√†n th√†nh: {time.strftime('%H:%M:%S', time.localtime())}")
                        
                except Exception as e:
                    progress_container.empty()
                    status_container.error(f"‚ùå L·ªói: {str(e)}")
                    update_log(log_placeholder, f"‚ùå L·ªói: {str(e)}")
                    st.exception(e)
                    st.info("B·∫°n c√≥ th·ªÉ th·ª≠ l·∫°i v·ªõi s·ªë ch∆∞∆°ng √≠t h∆°n ho·∫∑c ƒëi·ªÅu ch·ªânh c√°c th√¥ng s·ªë kh√°c.")

    # Tab T·∫°o Truy·ªán Theo Ch∆∞∆°ng C√≥ S·∫µn
    with tab7:
        st.header("T·∫°o Truy·ªán Theo Ch∆∞∆°ng C√≥ S·∫µn")
        
        # Kh·ªüi t·∫°o session state cho danh s√°ch ch∆∞∆°ng v√† b·ªô truy·ªán
        if 'custom_chapters' not in st.session_state:
            st.session_state.custom_chapters = []
        if 'current_series' not in st.session_state:
            st.session_state.current_series = None
        if 'download_status' not in st.session_state:
            st.session_state.download_status = {}
        if 'video_id_in_db' not in st.session_state:
            st.session_state.video_id_in_db = None
        
        # Qu·∫£n l√Ω b·ªô truy·ªán
        with st.expander("Qu·∫£n l√Ω b·ªô truy·ªán", expanded=False):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                # Hi·ªÉn th·ªã danh s√°ch b·ªô truy·ªán
                series_list = db_manager.get_all_series()
                series_names = ["Kh√¥ng thu·ªôc b·ªô n√†o"] + [series["name"] for series in series_list]
                selected_series = st.selectbox(
                    "Ch·ªçn b·ªô truy·ªán", 
                    options=series_names, 
                    index=0
                )
                
                if selected_series != "Kh√¥ng thu·ªôc b·ªô n√†o":
                    st.session_state.current_series = selected_series
                else:
                    st.session_state.current_series = None
                
            with col2:
                # Form th√™m b·ªô truy·ªán m·ªõi
                with st.form("add_series_form", clear_on_submit=True):
                    new_series_name = st.text_input("T√™n b·ªô truy·ªán m·ªõi")
                    series_desc = st.text_area("M√¥ t·∫£", height=100)
                    
                    submitted = st.form_submit_button("Th√™m b·ªô truy·ªán")
                    if submitted and new_series_name:
                        db_manager.save_series(new_series_name, series_desc)
                        st.success(f"ƒê√£ th√™m b·ªô truy·ªán '{new_series_name}'")
                        st.rerun()
        
        # Ti√™u ƒë·ªÅ truy·ªán
        if 'story_title' not in st.session_state:
            st.session_state.story_title = "Truy·ªán t·ª´ ch∆∞∆°ng c√≥ s·∫µn"
            
        st.text_input("Ti√™u ƒë·ªÅ truy·ªán", value=st.session_state.story_title, 
                     key="story_title_input", 
                     on_change=lambda: setattr(st.session_state, 'story_title', st.session_state.story_title_input))
        
        # Hi·ªÉn th·ªã b·∫£ng qu·∫£n l√Ω ch∆∞∆°ng
        if st.session_state.custom_chapters:
            st.subheader("Qu·∫£n l√Ω ch∆∞∆°ng")
            
            # Chu·∫©n b·ªã d·ªØ li·ªáu cho DataFrame
            chapter_data = []
            for chapter in st.session_state.custom_chapters:
                # L·∫•y 10 k√Ω t·ª± ƒë·∫ßu ti√™n c·ªßa n·ªôi dung
                preview = chapter["content"][:10] + "..." if len(chapter["content"]) > 10 else chapter["content"]
                
                # Tr·∫°ng th√°i video
                has_video = "‚úÖ" if chapter.get("video_path") and os.path.exists(chapter.get("video_path")) else "‚ùå"
                
                # Tr·∫°ng th√°i t·∫£i xu·ªëng
                downloaded = "‚úÖ" if st.session_state.download_status.get(f"chapter_{chapter['chapter_num']}") else "‚ùå"
                
                chapter_data.append({
                    "STT": chapter["chapter_num"],
                    "Ti√™u ƒë·ªÅ": chapter.get("title", f"Ch∆∞∆°ng {chapter['chapter_num']}"),
                    "N·ªôi dung": preview,
                    "C√≥ video": has_video,
                    "ƒê√£ t·∫£i xu·ªëng": downloaded
                })
            
            # T·∫°o v√† hi·ªÉn th·ªã DataFrame
            df = pd.DataFrame(chapter_data)
            st.dataframe(df, use_container_width=True)
            
            # N√∫t x√≥a t·∫•t c·∫£ ch∆∞∆°ng
            col1, col2 = st.columns([1, 4])
            with col1:
                if st.button("üóëÔ∏è X√≥a t·∫•t c·∫£ ch∆∞∆°ng"):
                    st.session_state.custom_chapters = []
                    st.success("ƒê√£ x√≥a t·∫•t c·∫£ ch∆∞∆°ng!")
                    st.rerun()
            with col2:
                # N√∫t t·∫°o video m·ªôt nh·∫•p
                if st.button("üöÄ T·∫°o video (t·∫•t c·∫£ c√°c b∆∞·ªõc)"):
                    if not st.session_state.custom_chapters:
                        st.error("Kh√¥ng c√≥ ch∆∞∆°ng n√†o ƒë·ªÉ t·∫°o video!")
                    else:
                        create_all_in_one_for_custom_chapters()
        
        # Form th√™m ch∆∞∆°ng m·ªõi
        with st.form("add_chapter_form"):
            st.subheader("Th√™m ch∆∞∆°ng m·ªõi")
            
            chapter_num = st.number_input("S·ªë th·ª© t·ª± ch∆∞∆°ng", min_value=1, value=len(st.session_state.custom_chapters) + 1)
            chapter_title = st.text_input("Ti√™u ƒë·ªÅ ch∆∞∆°ng", value=f"Ch∆∞∆°ng {chapter_num}")
            chapter_content = st.text_area("N·ªôi dung ch∆∞∆°ng", height=200)
            
            # N√∫t th√™m ch∆∞∆°ng
            submitted = st.form_submit_button("Th√™m ch∆∞∆°ng")
            if submitted:
                if not chapter_content:
                    st.error("N·ªôi dung ch∆∞∆°ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
                else:
                    # Ki·ªÉm tra xem s·ªë th·ª© t·ª± ƒë√£ t·ªìn t·∫°i ch∆∞a
                    existing_nums = [ch["chapter_num"] for ch in st.session_state.custom_chapters]
                    if chapter_num in existing_nums:
                        st.warning(f"Ch∆∞∆°ng {chapter_num} ƒë√£ t·ªìn t·∫°i! Vui l√≤ng ch·ªçn s·ªë th·ª© t·ª± kh√°c.")
                    else:
                        new_chapter = {
                            "chapter_num": chapter_num,
                            "title": chapter_title,
                            "content": chapter_content
                        }
                        st.session_state.custom_chapters.append(new_chapter)
                        st.session_state.story_data = None  # ƒê√°nh d·∫•u c·∫ßn t√°i t·∫°o d·ªØ li·ªáu truy·ªán
                        st.success(f"ƒê√£ th√™m ch∆∞∆°ng {chapter_num}: {chapter_title}")
                        st.rerun()
        
        # N√∫t x√≥a ch∆∞∆°ng ƒë∆∞·ª£c ch·ªçn
        with st.expander("X√≥a ch∆∞∆°ng"):
            if st.session_state.custom_chapters:
                chapter_to_delete = st.selectbox(
                    "Ch·ªçn ch∆∞∆°ng c·∫ßn x√≥a", 
                    options=[ch["chapter_num"] for ch in st.session_state.custom_chapters],
                    format_func=lambda x: f"Ch∆∞∆°ng {x}"
                )
                
                if st.button("X√≥a ch∆∞∆°ng ƒë√£ ch·ªçn"):
                    # T√¨m v√† x√≥a ch∆∞∆°ng kh·ªèi danh s√°ch
                    for i, chapter in enumerate(st.session_state.custom_chapters):
                        if chapter["chapter_num"] == chapter_to_delete:
                            del st.session_state.custom_chapters[i]
                            st.session_state.story_data = None  # ƒê√°nh d·∫•u c·∫ßn t√°i t·∫°o d·ªØ li·ªáu truy·ªán
                            st.success(f"ƒê√£ x√≥a ch∆∞∆°ng {chapter_to_delete}")
                            st.rerun()
                            break
            else:
                st.info("Ch∆∞a c√≥ ch∆∞∆°ng n√†o ƒë·ªÉ x√≥a.")
        
        # T·∫°o story_data t·ª´ c√°c ch∆∞∆°ng ƒë√£ nh·∫≠p
        if st.session_state.custom_chapters:
            # S·∫Øp x·∫øp ch∆∞∆°ng theo s·ªë th·ª© t·ª±
            st.session_state.custom_chapters.sort(key=lambda x: x["chapter_num"])
            
            # T·∫°o c·∫•u tr√∫c story_data
            custom_story_data = {
                "concept": st.session_state.story_title,
                "num_chapters": len(st.session_state.custom_chapters),
                "chapters": st.session_state.custom_chapters
            }
            
            # T·∫°o video cho t·ª´ng ch∆∞∆°ng
            st.subheader("T·∫°o H√¨nh ·∫£nh, Audio v√† Video")
            
            # C√†i ƒë·∫∑t cho vi·ªác t·∫°o media
            col1, col2 = st.columns(2)
            with col1:
                image_model = st.selectbox(
                    "Model t·∫°o h√¨nh ·∫£nh", 
                    options=["cogview4", "stable_diffusion", "cogview4"],
                    index=0,
                    format_func=lambda x: {
                        "cogview4": "CogView 4",
                        "gemini": "Gemini 2.0 Flash Image Gen",
                        "stable_diffusion": "Stable Diffusion"
                    }.get(x, x),
                    key="custom_image_model"
                )
            
            with col2:
                tts_provider = st.selectbox(
                    "Provider text-to-speech", 
                    options=["google", "openai"],
                    index=0,
                    format_func=lambda x: {
                        "google": "Google TTS (gTTS)",
                        "openai": "OpenAI TTS"
                    }.get(x, x),
                    key="custom_tts_provider"
                )
            
            # T√πy ch·ªçn video
            with st.expander("T√πy ch·ªçn video", expanded=False):
                vcol1, vcol2 = st.columns(2)
                with vcol1:
                    width = st.number_input("Chi·ªÅu r·ªông video (pixels)", 
                                          min_value=320, max_value=1920, value=1280, step=16,
                                          key="custom_story_width")
                with vcol2:
                    height = st.number_input("Chi·ªÅu cao video (pixels)", 
                                           min_value=240, max_value=1080, value=720, step=16,
                                           key="custom_story_height")
                
                fps = st.slider("Frames per second (FPS)", 
                              min_value=15, max_value=60, value=30, step=1,
                              key="custom_story_fps")
            
            # Buttons cho t·ª´ng b∆∞·ªõc x·ª≠ l√Ω
            col1, col2, col3 = st.columns(3)
            
            # T·∫°o output directory n·∫øu kh√¥ng c√≥
            if 'custom_story_output_dir' not in st.session_state:
                output_dir = create_session_directory()
                st.session_state.custom_story_output_dir = output_dir
            else:
                output_dir = st.session_state.custom_story_output_dir
            
            # N√∫t t·∫°o h√¨nh ·∫£nh
            with col1:
                if st.button("1. T·∫°o h√¨nh ·∫£nh", key="custom_story_create_images"):
                    with st.spinner(f"ƒêang t·∫°o h√¨nh ·∫£nh minh h·ªça v·ªõi model {image_model}..."):
                        try:
                            # L∆∞u story_data v√†o file ƒë·ªÉ d√πng sau n√†y
                            story_data_path = os.path.join(output_dir, "story_data.json")
                            with open(story_data_path, "w", encoding="utf-8") as f:
                                json.dump(custom_story_data, f, ensure_ascii=False, indent=2)
                            
                            # Kh·ªüi t·∫°o ImageGenerator
                            image_generator = ImageGenerator(model_type=image_model)
                            
                            # X·ª≠ l√Ω t·∫°o h√¨nh ·∫£nh
                            story_images = image_generator.process_story(
                                custom_story_data, 
                                output_dir=output_dir
                            )
                            
                            # L∆∞u story_images v√†o session_state
                            st.session_state.custom_story_images = story_images
                            st.success("ƒê√£ t·∫°o xong h√¨nh ·∫£nh minh h·ªça!")
                        except Exception as e:
                            st.error(f"L·ªói khi t·∫°o h√¨nh ·∫£nh: {str(e)}")
            
            # N√∫t t·∫°o audio
            with col2:
                if st.button("2. T·∫°o audio", key="custom_story_create_audio"):
                    with st.spinner(f"ƒêang t·∫°o audio v·ªõi provider {tts_provider}..."):
                        try:
                            audio_generator = AudioGenerator(provider=tts_provider)
                            story_audio = audio_generator.process_story(
                                custom_story_data, 
                                output_dir=output_dir
                            )
                            
                            # L∆∞u story_audio v√†o session_state
                            st.session_state.custom_story_audio = story_audio
                            st.success("ƒê√£ t·∫°o xong audio!")
                        except Exception as e:
                            st.error(f"L·ªói khi t·∫°o audio: {str(e)}")
            
            # N√∫t t·∫°o video
            with col3:
                if st.button("3. T·∫°o video", key="custom_story_create_video"):
                    if 'custom_story_images' not in st.session_state:
                        st.error("Vui l√≤ng t·∫°o h√¨nh ·∫£nh tr∆∞·ªõc!")
                    elif 'custom_story_audio' not in st.session_state:
                        st.error("Vui l√≤ng t·∫°o audio tr∆∞·ªõc!")
                    else:
                        with st.spinner("ƒêang t·∫°o video... Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t nhi·ªÅu th·ªùi gian..."):
                            try:
                                video_generator = VideoGenerator(width=width, height=height, fps=fps)
                                video_data = video_generator.create_full_video(
                                    custom_story_data,
                                    st.session_state.custom_story_images,
                                    st.session_state.custom_story_audio,
                                    output_dir=output_dir
                                )
                                
                                # L∆∞u video_data v√†o session_state
                                st.session_state.custom_story_video = video_data
                                
                                # L∆∞u th√¥ng tin video v√†o MongoDB
                                story_title = st.session_state.get("story_title", "My Story")
                                series_name = st.session_state.get("current_series", None)
                                
                                video_id = db_manager.save_video_data(
                                    video_data,
                                    story_title,
                                    series_name
                                )
                                
                                # C·∫≠p nh·∫≠t video_id v√†o session state
                                st.session_state.video_id_in_db = video_id
                                
                                if video_id:
                                    st.success(f"ƒê√£ t·∫°o l·∫°i video th√†nh c√¥ng v√† l∆∞u v·ªõi ID: {video_id}")
                                else:
                                    st.warning("ƒê√£ t·∫°o l·∫°i video nh∆∞ng kh√¥ng th·ªÉ l∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu.")
                                
                                # Hi·ªÉn th·ªã video m·ªõi
                                display_videos(video_data, video_id)
                                
                                # Rerun ƒë·ªÉ c·∫≠p nh·∫≠t UI
                                st.rerun()
                            except Exception as e:
                                st.error(f"L·ªói khi t·∫°o l·∫°i video: {str(e)}")
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£ n·∫øu c√≥
            if 'custom_story_video' in st.session_state:
                display_videos(st.session_state.custom_story_video, st.session_state.video_id_in_db)
        else:
            st.info("Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt ch∆∞∆°ng ƒë·ªÉ t·∫°o truy·ªán v√† video.")

    # Th√¥ng tin cu·ªëi trang
    st.markdown("---")
    st.markdown("### Th√¥ng tin")
    st.markdown("""
    **Auto Create YouTube Content** - C√¥ng c·ª• t·∫°o n·ªôi dung t·ª± ƒë·ªông t·ª´ √Ω t∆∞·ªüng ƒë·∫øn video.
    
    S·ª≠ d·ª•ng c√°c API:
    - T·∫°o n·ªôi dung truy·ªán: Gemini-2.0-flash
    - T·∫°o h√¨nh ·∫£nh: Google Gemini, Stable Diffusion, CogView4
    - T·∫°o audio: Google TTS (gTTS), OpenAI TTS
    - L∆∞u tr·ªØ d·ªØ li·ªáu: MongoDB
    """)

def create_all_in_one_for_custom_chapters():
    """T·∫°o video t·ª´ c√°c ch∆∞∆°ng ƒë√£ t·∫£i l√™n"""
    st.header("T·∫°o Truy·ªán Theo Ch∆∞∆°ng C√≥ S·∫µn", divider="rainbow")
    
    # T·∫°o container cho log
    log_placeholder = create_log_container()
    update_log(log_placeholder, "B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o truy·ªán v√† video...")
    
    # Form nh·∫≠p th√¥ng tin
    with st.form("custom_chapters_form"):
        # Series info
        series_name = st.text_input("T√™n b·ªô truy·ªán (kh√¥ng b·∫Øt bu·ªôc)", help="Nh·∫≠p t√™n b·ªô truy·ªán n·∫øu c√≥")
        
        # Truy·ªán info
        story_title = st.text_input("Ti√™u ƒë·ªÅ truy·ªán", help="Nh·∫≠p ti√™u ƒë·ªÅ cho truy·ªán c·ªßa b·∫°n")
        
        st.write("### Nh·∫≠p n·ªôi dung c√°c ch∆∞∆°ng")
        
        # T·∫°o tabs cho t·ª´ng ch∆∞∆°ng
        tabs = st.tabs([f"Ch∆∞∆°ng {i+1}" for i in range(5)])
        
        chapters_data = []
        
        for i, tab in enumerate(tabs):
            with tab:
                chapter_title = st.text_input(f"Ti√™u ƒë·ªÅ ch∆∞∆°ng {i+1}", value=f"Ch∆∞∆°ng {i+1}", key=f"ch_title_{i}")
                chapter_content = st.text_area(f"N·ªôi dung ch∆∞∆°ng {i+1}", height=200, key=f"ch_content_{i}")
                
                # Th√™m d·ªØ li·ªáu ch∆∞∆°ng v√†o danh s√°ch
                chapters_data.append({
                    "index": i,
                    "title": chapter_title,
                    "content": chapter_content
                })
        
        # C·∫•u h√¨nh
        col1, col2 = st.columns(2)
        
        with col1:
            image_model = st.selectbox(
                "Model t·∫°o h√¨nh ·∫£nh", 
                options=["cogview4", "stable_diffusion", "gemini"],
                index=0,
                format_func=lambda x: {
                    "cogview4": "CogView 4",
                    "stable_diffusion": "Stable Diffusion",
                    "gemini": "Gemini 2.0 Flash Image Gen"
                }.get(x, x),
                key="custom_image_model"
            )
        
        with col2:
            tts_provider = st.selectbox(
                "Provider text-to-speech", 
                options=["google", "openai"],
                index=0,
                format_func=lambda x: {
                    "google": "Google TTS (gTTS)",
                    "openai": "OpenAI TTS"
                }.get(x, x),
                key="custom_tts_provider"
            )
        
        submit_button = st.form_submit_button("T·∫°o truy·ªán v√† video")
    
    if submit_button:
        # Ki·ªÉm tra c√°c ch∆∞∆°ng c√≥ n·ªôi dung
        valid_chapters = [ch for ch in chapters_data if ch["content"].strip()]
        
        if not valid_chapters:
            st.error("Vui l√≤ng nh·∫≠p n·ªôi dung cho √≠t nh·∫•t m·ªôt ch∆∞∆°ng!")
            return
        
        if not story_title:
            st.error("Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ truy·ªán!")
            return
        
        # T·∫°o th∆∞ m·ª•c ƒë·∫ßu ra
        output_dir = create_session_directory()
        create_directories()
        
        # L∆∞u th√¥ng tin v√†o session_state
        if "custom_story_output_dir" not in st.session_state:
            st.session_state.custom_story_output_dir = output_dir
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu truy·ªán
        story_data = {
            "concept": story_title,
            "num_chapters": len(valid_chapters),
            "chapters": []
        }
        
        for i, ch in enumerate(valid_chapters):
            chapter_data = {
                "chapter_num": i + 1,
                "title": ch["title"],
                "content": ch["content"]
            }
            story_data["chapters"].append(chapter_data)
        
        # L∆∞u d·ªØ li·ªáu truy·ªán
        story_file = os.path.join(output_dir, "story_data.json")
        with open(story_file, "w", encoding="utf-8") as f:
            json.dump(story_data, f, ensure_ascii=False, indent=2)
        
        for i, chapter in enumerate(story_data["chapters"]):
            chapter_file = os.path.join(output_dir, f"chapter_{i+1}.txt")
            with open(chapter_file, "w", encoding="utf-8") as f:
                f.write(chapter["content"])
        
        update_log(log_placeholder, f"ƒê√£ l∆∞u n·ªôi dung {len(valid_chapters)} ch∆∞∆°ng.")
        
        # X·ª≠ l√Ω t·∫°o h√¨nh ·∫£nh
        update_log(log_placeholder, "ƒêang t·∫°o h√¨nh ·∫£nh cho truy·ªán...")
        image_generator = ImageGenerator(model_type=image_model)
        story_images = image_generator.process_story(story_data, output_dir=output_dir)
        
        # L∆∞u v√†o session_state
        st.session_state.custom_story_images = story_images
        
        # X·ª≠ l√Ω t·∫°o audio
        update_log(log_placeholder, "ƒêang t·∫°o audio cho truy·ªán...")
        try:
            audio_generator = AudioGenerator(provider=tts_provider)
            story_audio = audio_generator.process_story(story_data, output_dir=output_dir)
            
            # X·ª≠ l√Ω t·∫°o video
            update_log(log_placeholder, "ƒêang t·∫°o video cho truy·ªán...")
            video_generator = VideoGenerator()
            video_data = video_generator.create_full_video(
                story_data, 
                story_images, 
                story_audio, 
                output_dir=output_dir
            )
            
            # L∆∞u th√¥ng tin v√†o session_state
            st.session_state.custom_story_video = video_data
            
            # L∆∞u v√†o c∆° s·ªü d·ªØ li·ªáu
            from utils.db_utils import db_manager
            from utils.telegram_utils import telegram_manager
            
            # Kh·ªüi t·∫°o video_id v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
            video_id = None
            
            try:
                update_log(log_placeholder, "ƒêang l∆∞u th√¥ng tin video v√†o c∆° s·ªü d·ªØ li·ªáu...")
                
                # L∆∞u v√†o MongoDB n·∫øu ƒë√£ k·∫øt n·ªëi
                if db_manager.is_connected():
                    video_id = db_manager.save_video_data(video_data, story_title, series_name)
                    update_log(log_placeholder, f"ƒê√£ l∆∞u v√†o MongoDB v·ªõi ID: {video_id}")
                
                # N·∫øu MongoDB kh√¥ng kh·∫£ d·ª•ng v√† Telegram ƒë∆∞·ª£c c·∫•u h√¨nh, th·ª≠ g·ª≠i qua Telegram
                if (not video_id or not db_manager.is_connected()) and telegram_manager.is_configured():
                    update_log(log_placeholder, "ƒêang g·ª≠i video l√™n Telegram...")
                    
                    # L·∫•y ƒë∆∞·ªùng d·∫´n video ƒë·∫ßy ƒë·ªß
                    full_video_path = video_data.get("full_video")
                    
                    if full_video_path and os.path.exists(full_video_path):
                        # T·∫°o caption
                        caption = f"<b>Ti√™u ƒë·ªÅ:</b> {story_title}"
                        if series_name:
                            caption += f"\n<b>B·ªô truy·ªán:</b> {series_name}"
                        
                        # G·ª≠i video l√™n Telegram
                        message_id = telegram_manager.send_video(full_video_path, caption)
                        
                        if message_id:
                            update_log(log_placeholder, f"ƒê√£ g·ª≠i video th√†nh c√¥ng l√™n Telegram v·ªõi ID: {message_id}")
                            # G√°n video_id n·∫øu ch∆∞a c√≥ t·ª´ save_video_data
                            if not video_id:
                                video_id = f"tg_{message_id}"
                        else:
                            update_log(log_placeholder, "Kh√¥ng th·ªÉ g·ª≠i video l√™n Telegram.")
                    else:
                        update_log(log_placeholder, f"Kh√¥ng t√¨m th·∫•y file video ƒë·∫ßy ƒë·ªß t·∫°i: {full_video_path}")
                
                # L∆∞u ID v√†o session state
                if video_id:
                    st.session_state.video_id_in_db = video_id
                
            except Exception as e:
                update_log(log_placeholder, f"L·ªói khi l∆∞u video: {str(e)}")
            
            # Hi·ªÉn th·ªã video m·ªõi
            display_videos(video_data, video_id if video_id else None)
            
            # Rerun ƒë·ªÉ c·∫≠p nh·∫≠t UI
            st.rerun()
        except Exception as e:
            update_log(log_placeholder, f"L·ªói: {str(e)}")
            update_log(log_placeholder, f"Traceback: {traceback.format_exc()}")

def display_frames(video_data, story_images, output_dir):
    """Hi·ªÉn th·ªã c√°c frame h√¨nh ·∫£nh, prompt v√† n√∫t t·∫°o l·∫°i ·∫£nh"""
    st.subheader("C√°c frame h√¨nh ·∫£nh trong video")
    st.info("Xem v√† ch·ªânh s·ª≠a c√°c frame h√¨nh ·∫£nh ƒë∆∞·ª£c s·ª≠ d·ª•ng trong video.")
    
    # Ki·ªÉm tra xem c√≥ story_images kh√¥ng
    if not story_images:
        st.warning("Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ h√¨nh ·∫£nh ƒë√£ t·∫°o.")
        return
    
    # T·∫°o danh s√°ch c√°c tab cho t·ª´ng ch∆∞∆°ng
    chapter_titles = [f"Ch∆∞∆°ng {ch['chapter_num']}" for ch in story_images]
    tabs = st.tabs(chapter_titles)
    
    # Hi·ªÉn th·ªã h√¨nh ·∫£nh v√† prompt cho t·ª´ng ch∆∞∆°ng
    for i, chapter_images in enumerate(story_images):
        with tabs[i]:
            images = chapter_images.get("images", [])
            if not images:
                st.warning(f"Kh√¥ng c√≥ h√¨nh ·∫£nh n√†o cho {chapter_titles[i]}")
                continue
            
            # Hi·ªÉn th·ªã l∆∞·ªõi h√¨nh ·∫£nh, 3 ·∫£nh m·ªói h√†ng
            for j in range(0, len(images), 3):
                cols = st.columns(3)
                for k in range(3):
                    idx = j + k
                    if idx < len(images):
                        img_data = images[idx]
                        image_path = img_data.get("image_path")
                        prompt = img_data.get("prompt", "Kh√¥ng c√≥ th√¥ng tin prompt")
                        
                        if image_path and os.path.exists(image_path):
                            with cols[k]:
                                st.image(image_path, caption=f"Frame {idx+1}")
                                
                                # Hi·ªÉn th·ªã prompt trong expander
                                with st.expander("Xem prompt"):
                                    st.text_area("Prompt", value=prompt, height=150, key=f"prompt_{chapter_images['chapter_num']}_{idx}")
                                
                                # N√∫t t·∫°o l·∫°i ·∫£nh
                                if st.button("T·∫°o l·∫°i ·∫£nh n√†y", key=f"recreate_{chapter_images['chapter_num']}_{idx}"):
                                    with st.spinner("ƒêang t·∫°o l·∫°i h√¨nh ·∫£nh..."):
                                        try:
                                            # L·∫•y model t·ª´ session state ho·∫∑c m·∫∑c ƒë·ªãnh
                                            image_model = st.session_state.get("custom_image_model", "gemini")
                                            
                                            # Kh·ªüi t·∫°o ImageGenerator
                                            image_generator = ImageGenerator(model_type=image_model)
                                            
                                            # L·∫•y prompt ƒë√£ ch·ªânh s·ª≠a
                                            edited_prompt = st.session_state[f"prompt_{chapter_images['chapter_num']}_{idx}"]
                                            
                                            # T·∫°o l·∫°i h√¨nh ·∫£nh
                                            new_image_path = image_generator.generate_image(edited_prompt, image_path)
                                            
                                            if new_image_path:
                                                st.success("ƒê√£ t·∫°o l·∫°i h√¨nh ·∫£nh th√†nh c√¥ng!")
                                                st.image(new_image_path, caption=f"Frame {idx+1} (ƒê√£ t·∫°o l·∫°i)")
                                                
                                                # C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n ·∫£nh trong session state
                                                img_data["image_path"] = new_image_path
                                                img_data["prompt"] = edited_prompt
                                            else:
                                                st.error("Kh√¥ng th·ªÉ t·∫°o l·∫°i h√¨nh ·∫£nh, vui l√≤ng th·ª≠ l·∫°i.")
                                        except Exception as e:
                                            st.error(f"L·ªói khi t·∫°o l·∫°i h√¨nh ·∫£nh: {str(e)}")
                        else:
                            with cols[k]:
                                st.warning(f"Kh√¥ng t√¨m th·∫•y h√¨nh ·∫£nh t·∫°i: {image_path}")
    
    # Th√™m n√∫t ƒë·ªÉ t·∫°o l·∫°i video sau khi ƒë√£ ch·ªânh s·ª≠a h√¨nh ·∫£nh
    if st.button("T·∫°o l·∫°i video v·ªõi h√¨nh ·∫£nh ƒë√£ ch·ªânh s·ª≠a", key="recreate_video"):
        with st.spinner("ƒêang t·∫°o l·∫°i video... Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t nhi·ªÅu th·ªùi gian..."):
            try:
                # Kh·ªüi t·∫°o VideoGenerator
                width = st.session_state.get("custom_story_width", 1280)
                height = st.session_state.get("custom_story_height", 720)
                fps = st.session_state.get("custom_story_fps", 30)
                video_generator = VideoGenerator(width=width, height=height, fps=fps)
                
                # L·∫•y d·ªØ li·ªáu story t·ª´ session state
                story_data = None
                story_audio = None
                
                if "custom_chapters" in st.session_state:
                    # T·∫°o c·∫•u tr√∫c story_data t·ª´ custom_chapters
                    story_data = {
                        "concept": st.session_state.get("story_title", "My Story"),
                        "num_chapters": len(st.session_state.custom_chapters),
                        "chapters": st.session_state.custom_chapters
                    }
                
                if "custom_story_audio" in st.session_state:
                    story_audio = st.session_state.custom_story_audio
                
                if story_data and story_audio and story_images:
                    # T·∫°o l·∫°i video
                    video_data = video_generator.create_full_video(
                        story_data, 
                        story_images, 
                        story_audio, 
                        output_dir=output_dir
                    )
                    
                    # C·∫≠p nh·∫≠t session state v·ªõi video m·ªõi
                    st.session_state.custom_story_video = video_data
                    
                    # L∆∞u th√¥ng tin video v√†o MongoDB
                    story_title = st.session_state.get("story_title", "My Story")
                    series_name = st.session_state.get("current_series", None)
                    
                    # Kh·ªüi t·∫°o video_id
                    video_id = None
                    
                    try:
                        # L∆∞u v√†o MongoDB n·∫øu ƒë√£ k·∫øt n·ªëi
                        if db_manager.is_connected():
                            video_id = db_manager.save_video_data(video_data, story_title, series_name)
                            st.success(f"ƒê√£ l∆∞u video v√†o MongoDB v·ªõi ID: {video_id}")
                        
                        # N·∫øu MongoDB kh√¥ng kh·∫£ d·ª•ng v√† Telegram ƒë∆∞·ª£c c·∫•u h√¨nh, th·ª≠ g·ª≠i qua Telegram
                        if (not video_id or not db_manager.is_connected()) and telegram_manager.is_configured():
                            st.info("ƒêang g·ª≠i video l√™n Telegram...")
                            
                            # L·∫•y ƒë∆∞·ªùng d·∫´n video ƒë·∫ßy ƒë·ªß
                            full_video_path = video_data.get("full_video")
                            
                            if full_video_path and os.path.exists(full_video_path):
                                # T·∫°o caption
                                caption = f"<b>Ti√™u ƒë·ªÅ:</b> {story_title}"
                                if series_name:
                                    caption += f"\n<b>B·ªô truy·ªán:</b> {series_name}"
                                
                                # G·ª≠i video l√™n Telegram
                                message_id = telegram_manager.send_video(full_video_path, caption)
                                
                                if message_id:
                                    st.success(f"ƒê√£ g·ª≠i video th√†nh c√¥ng l√™n Telegram v·ªõi ID: {message_id}")
                                    # G√°n video_id n·∫øu ch∆∞a c√≥ t·ª´ save_video_data
                                    if not video_id:
                                        video_id = f"tg_{message_id}"
                                else:
                                    st.warning("Kh√¥ng th·ªÉ g·ª≠i video l√™n Telegram.")
                            else:
                                st.warning(f"Kh√¥ng t√¨m th·∫•y file video ƒë·∫ßy ƒë·ªß t·∫°i: {full_video_path}")
                        
                        # L∆∞u ID v√†o session state
                        if video_id:
                            st.session_state.video_id_in_db = video_id
                        
                    except Exception as e:
                        st.error(f"L·ªói khi l∆∞u video: {str(e)}")
                    
                    # Hi·ªÉn th·ªã video m·ªõi
                    display_videos(video_data, video_id if video_id else None)
                    
                    # Rerun ƒë·ªÉ c·∫≠p nh·∫≠t UI
                    st.rerun()
                else:
                    st.error("Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t·∫°o l·∫°i video. Vui l√≤ng t·∫°o video tr∆∞·ªõc.")
            except Exception as e:
                st.error(f"L·ªói khi t·∫°o l·∫°i video: {str(e)}")

if __name__ == "__main__":
    main() 